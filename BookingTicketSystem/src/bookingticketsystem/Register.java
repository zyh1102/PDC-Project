/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bookingticketsystem;

import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.UUID;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.Document;

/**
 *
 * @author Administrator
 */
public class Register extends javax.swing.JFrame implements DocumentListener {

    /**
     * Creates new form Register1
     */
    public Register(ArrayList userList, ArrayList mailList) {
        this.userList = userList;
        this.mailList = mailList;
        
        initComponents();
        this.setTitle("Register");
        this.setBounds(100, 100, 600, 600);
        this.setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Register = new javax.swing.JButton();
        back = new javax.swing.JButton();
        usernameLabel = new javax.swing.JLabel();
        userText = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordText = new javax.swing.JTextField();
        phoneLabel = new javax.swing.JLabel();
        phoneText = new javax.swing.JTextField();
        emailLabel = new javax.swing.JLabel();
        mailText = new javax.swing.JTextField();
        imageLabel = new javax.swing.JLabel(illegal);
        mailLabel = new javax.swing.JLabel(illegal);
        photoLabel = new javax.swing.JLabel();
        uploadButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Register.setText("Register");
        Register.setFocusPainted(false);
        Register.setForeground(Color.WHITE);
        Register.setBackground(Color.GRAY);
        Register.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterActionPerformed(evt);
            }
        });

        back.setText("Back");
        back.setFocusPainted(false);
        back.setForeground(Color.WHITE);
        back.setBackground(Color.GRAY);
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        usernameLabel.setText("Username:");
        usernameLabel.setFont(textFont);

        Document document = userText.getDocument();
        document.addDocumentListener(this);

        passwordLabel.setText("Password:");
        passwordLabel.setFont(textFont);

        phoneLabel.setText("Telephone number:");
        phoneLabel.setFont(textFont);

        emailLabel.setText("Email:");
        emailLabel.setFont(textFont);

        Document document1 = mailText.getDocument();
        document1.addDocumentListener(this);

        imageLabel.setText(null);

        mailLabel.setText("");

        photoLabel.setBorder(BorderFactory.createLineBorder(Color.black));

        uploadButton.setText("Set Your Photo");
        uploadButton.setFocusPainted(false);
        uploadButton.setBackground(Color.GRAY);
        uploadButton.setForeground(Color.WHITE);
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addComponent(Register)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 156, Short.MAX_VALUE)
                .addComponent(back)
                .addGap(171, 171, 171))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(uploadButton)
                        .addGap(29, 29, 29)
                        .addComponent(photoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(passwordLabel)
                            .addComponent(usernameLabel)
                            .addComponent(phoneLabel)
                            .addComponent(emailLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(mailText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(passwordText, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(userText, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(phoneText, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(mailLabel)))
                .addGap(96, 96, 96))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(uploadButton)
                        .addGap(83, 83, 83))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(photoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(userText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imageLabel))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneLabel)
                    .addComponent(phoneText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailLabel)
                    .addComponent(mailText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mailLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 142, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Register)
                    .addComponent(back))
                .addGap(38, 38, 38))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void RegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterActionPerformed
        // TODO add your handling code here:
        try {
            if (islegal && isEmailLegal) {
                String userName = userText.getText();
                String userPassword = passwordText.getText();
                String phoneNumber = phoneText.getText();
                String email = mailText.getText();
                String uuid = UUID.randomUUID().toString().replaceAll("-", "");
                con = DriverManager.getConnection(url, name, password);
                Statement statement = con.createStatement();
                String insertStatement = "insert into USERINFO(ID,USERNAME,PASSWORD,PHONENUMBER,EMAIL,PROFILEPHOTO) values('" + uuid + "','" + userName + "','" + userPassword + "','" + phoneNumber + "','" + email + "','" + this.imagePath + "')";
                statement.executeUpdate(insertStatement);
                JOptionPane.showMessageDialog(new JDialog(), "Register successfully");
                dispose();
                new login();
            } else {
                JOptionPane.showMessageDialog(new JDialog(), "The information is illegal!");
            }
        } catch (Exception event) {
            event.printStackTrace();
        }
    }//GEN-LAST:event_RegisterActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        new login();
        dispose();
    }//GEN-LAST:event_backActionPerformed

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed
        // TODO add your handling code here:
        upload(uploadButton);
        
    }//GEN-LAST:event_uploadButtonActionPerformed

    private void upload(javax.swing.JButton uploadButton){
        JFileChooser choose = new JFileChooser();
        choose.setMultiSelectionEnabled(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".jpg/.png","JPG","PNG");
        choose.setFileFilter(filter);
        int value = choose.showOpenDialog(uploadButton);
        if(value == choose.APPROVE_OPTION){
            File file = choose.getSelectedFile();
            String fileName = file.getName();
            String prefix = fileName.substring(fileName.lastIndexOf(".")+1);
            if(!(prefix.equals("jpg")||prefix.equals("png"))){
                JOptionPane.showMessageDialog(new JDialog(), "Please Select the correct format of the photo(.jpg/.png)");
                return;
            }
            String path = "./src/ProfilePhoto/";
            File dir = new File(path);
            File []fileList = dir.listFiles();
            HashSet<String> fileSet = new HashSet();
            for(File f : fileList){
                fileSet.add(f.getName());
            }
            String absolutePath = choose.getSelectedFile().getAbsolutePath();
            ImageIcon imageIcon = new ImageIcon(absolutePath);
            if(fileSet.contains(file.getName())){
                JOptionPane.showMessageDialog(new JDialog(), "The picture is exist!");
                imageIcon = new ImageIcon(path  + file.getName());
                this.imagePath = path  + file.getName();
                Image image = imageIcon.getImage();
                image = image.getScaledInstance(100, 100, Image.SCALE_DEFAULT);
                imageIcon.setImage(image);
                photoLabel.setIcon(imageIcon);
                return;
            }
            FileInputStream input = null;
            FileOutputStream output = null;
            try{
                input = new FileInputStream(file);
                byte[] buffer = new byte[1024];
                File outFile = new File(path , file.getName());
                output = new FileOutputStream(outFile);
                int length = 0;
                
                while((length = input.read(buffer)) != -1){
                    output.write(buffer,0,length);
                }
                output.flush();
                imageIcon = new ImageIcon(path + file.getName());
                this.imagePath = path + file.getName();
                Image image = imageIcon.getImage();
                image = image.getScaledInstance(100, 100, Image.SCALE_DEFAULT);
                imageIcon.setImage(image);
                photoLabel.setIcon(imageIcon);
                JOptionPane.showMessageDialog(null, "Succuss in upload", "提示", JOptionPane.INFORMATION_MESSAGE);
            }
            catch(FileNotFoundException event){
                JOptionPane.showMessageDialog(null, "Failure in upload", "提示", JOptionPane.ERROR_MESSAGE);
                event.printStackTrace();
            }
            catch(IOException event){
                JOptionPane.showMessageDialog(null, "Failure in upload", "提示", JOptionPane.ERROR_MESSAGE);
                event.printStackTrace();
            }
            finally{
                try{
                    output.close();
                    input.close();
                }
                catch(IOException event){
                    event.printStackTrace();
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Register;
    public static String url = "jdbc:derby:MOVIESYSTEM; create=true";
    public static String name = "root";
    public static String password = "root";
    Connection con;
    private boolean islegal = false;
    private boolean isEmailLegal = false;
    Font textFont = new Font("Serial",Font.BOLD,15);
    private javax.swing.JButton back;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel imageLabel;
    private ImageIcon legal = new ImageIcon("./src/Images/legal.png");
    private ImageIcon illegal = new ImageIcon("./src/Images/illegal.png");
    private javax.swing.JLabel mailLabel;
    private javax.swing.JTextField mailText;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField passwordText;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JTextField phoneText;
    private javax.swing.JLabel photoLabel;
    private String imagePath = null;
    private javax.swing.JButton uploadButton;
    private javax.swing.JTextField userText;
    private ArrayList userList;
    private ArrayList mailList;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void insertUpdate(DocumentEvent e) {
        if (userList.isEmpty()) {
            imageLabel.setIcon(legal);
            islegal = true;
        } else if (userList.contains(userText.getText())) {
            imageLabel.setIcon(illegal);
            islegal = false;
        } else {
            imageLabel.setIcon(legal);
            islegal = true;
        }
        if (userText.getText().length() > 20) {
            imageLabel.setIcon(illegal);
            islegal = false;
        }
        if (userText.getText().contains(" ")) {
            imageLabel.setIcon(illegal);
            islegal = false;
        }
        if (userText.getText().equals("")) {
            imageLabel.setIcon(illegal);
            islegal = false;
        }

        if (!mailText.getText().equals("")) {
            if (!mailText.getText().contains(" ")) {
                if (mailText.getText().contains("@")) {
                    if (mailText.getText().contains(".")) {
                        if (mailList.isEmpty()) {
                            mailLabel.setIcon(legal);
                            isEmailLegal = true;
                        } else {
                            if (mailList.contains(mailText.getText())) {
                                mailLabel.setIcon(illegal);
                                isEmailLegal = false;
                            } else {
                                mailLabel.setIcon(legal);
                                isEmailLegal = true;
                            }
                        }
                    } else {
                        mailLabel.setIcon(illegal);
                        isEmailLegal = false;
                    }
                } else {
                    mailLabel.setIcon(illegal);
                    isEmailLegal = false;
                }
            } else {
                mailLabel.setIcon(illegal);
                isEmailLegal = false;
            }
        } else {
            mailLabel.setIcon(illegal);
            isEmailLegal = false;
        }
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        if (userList.isEmpty()) {
            imageLabel.setIcon(legal);
            islegal = true;
        } else if (userList.contains(userText.getText())) {
            imageLabel.setIcon(illegal);
            islegal = false;
        } else {
            imageLabel.setIcon(legal);
            islegal = true;
        }
        if (userText.getText().length() > 20) {
            imageLabel.setIcon(illegal);
            islegal = false;
        }
        if (userText.getText().contains(" ")) {
            imageLabel.setIcon(illegal);
            islegal = false;
        }
        if (userText.getText().equals("")) {
            imageLabel.setIcon(illegal);
            islegal = false;
        }

         if (!mailText.getText().equals("")) {
            if (!mailText.getText().contains(" ")) {
                if (mailText.getText().contains("@")) {
                    if (mailText.getText().contains(".")) {
                        if (mailList.isEmpty()) {
                            mailLabel.setIcon(legal);
                            isEmailLegal = true;
                        } else {
                            if (mailList.contains(mailText.getText())) {
                                mailLabel.setIcon(illegal);
                                isEmailLegal = false;
                            } else {
                                mailLabel.setIcon(legal);
                                isEmailLegal = true;
                            }
                        }
                    } else {
                        mailLabel.setIcon(illegal);
                        isEmailLegal = false;
                    }
                } else {
                    mailLabel.setIcon(illegal);
                    isEmailLegal = false;
                }
            } else {
                mailLabel.setIcon(illegal);
                isEmailLegal = false;
            }
        } else {
            mailLabel.setIcon(illegal);
            isEmailLegal = false;
        }
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        if (userList.isEmpty()) {
            imageLabel.setIcon(legal);
            islegal = true;
        } else if (userList.contains(userText.getText())) {
            imageLabel.setIcon(illegal);
            islegal = false;
        } else {
            imageLabel.setIcon(legal);
            islegal = true;
        }
        if (userText.getText().length() > 20) {
            imageLabel.setIcon(illegal);
            islegal = false;
        }
        if (userText.getText().contains(" ")) {
            imageLabel.setIcon(illegal);
            islegal = false;
        }
        if (userText.getText().equals("")) {
            imageLabel.setIcon(illegal);
            islegal = false;
        }
         if (!mailText.getText().equals("")) {
            if (!mailText.getText().contains(" ")) {
                if (mailText.getText().contains("@")) {
                    if (mailText.getText().contains(".")) {
                        if (mailList.isEmpty()) {
                            mailLabel.setIcon(legal);
                            isEmailLegal = true;
                        } else {
                            if (mailList.contains(mailText.getText())) {
                                mailLabel.setIcon(illegal);
                                isEmailLegal = false;
                            } else {
                                mailLabel.setIcon(legal);
                                isEmailLegal = true;
                            }
                        }
                    } else {
                        mailLabel.setIcon(illegal);
                        isEmailLegal = false;
                    }
                } else {
                    mailLabel.setIcon(illegal);
                    isEmailLegal = false;
                }
            } else {
                mailLabel.setIcon(illegal);
                isEmailLegal = false;
            }
        } else {
            mailLabel.setIcon(illegal);
            isEmailLegal = false;
        }
    }
}
